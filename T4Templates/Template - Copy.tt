<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ parameter type="System.String" name="Namespace" #>
<#@ proxymodel processor="ModelProcessor" name="Model" #>
<#@ codeblockmanager processor="CodeBlockManager" name="Manager" #>


<# Manager.StartHeader(); #>
// 
// Code generated by a template.
//
using System;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;

namespace <#= Namespace #> 
{
<# Manager.EndBlock(); #>

//
// Create a file for each global optionset defined in the model. Do not use the 
// common header and footer for these files.
//
<# foreach (var option in Model.GlobalOptionSets) {#>
<# var filename = @"GlobalEnums\" + option.DisplayName; #>
<# Manager.StartFile(filename, false, false); #>
namespace <#= Namespace #> 
{
	public partial class GlobalEnums 
	{
		public enum <#=string.Format("e{0}", option.DisplayName)#> {<#foreach(var e in option.Items){#> <#=e.DisplayName#>=<#=e.Value#>, <#}#>}
	}
}
<# Manager.EndBlock(); #>
<# option.SetType(string.Format("GlobalEnums.e{0}", option.DisplayName)); #>
<#}#>


<# foreach (var entity in Model.Entities) {#>
<# var filename = @"Entities\" + entity.LogicalName; #>
<# Manager.StartFile(filename); #>

	[EntityLogicalNameAttribute("<#=entity.LogicalName#>")]
	public partial class <#=entity.DisplayName#> : EntityProxy
	{
		public static string EntityLogicalName => GetLogicalName(typeof(<#=entity.DisplayName#>));

		public <#=entity.DisplayName#>()
			: base("<#=entity.LogicalName#>")
		{
		}

<# if(entity.Fields.Where(f => f.Enum != null && f.Enum.IsGlobal != true).Count() > 0) { #>
		//
		// Local option set enumerations
		//
<# foreach (var f in entity.Fields.Where(f => f.Enum != null && f.Enum.IsGlobal != true)){ #>
<# f.Enum.SetType(string.Format("e{0}",f.Enum.DisplayName)); #>
		public enum <#=f.Enum.Type#> {<#foreach(var e in f.Enum.Items){#> <#=e.DisplayName#>=<#=e.Value#>, <#}#>}
<#}#>
<#}#>

		// 
		// Late bound field name constants
		//
		public class Fields
		{			
			
<#foreach(var f in entity.Fields){#>
			public const string <#=f.DisplayName#> = "<#=f.LogicalName#>";
<#}#>
		}


		[AttributeLogicalNameAttribute("<#=entity.LogicalName#>id")]
		public override Guid Id
		{
			get { return base.Id; }
			set { <#=entity.PrimaryKey.DisplayName#> = value; }
		}

<# foreach(var f in entity.Fields) {#>
		[AttributeLogicalNameAttribute("<#=f.LogicalName#>")]
		public virtual <#=f.Type.CSharp#> <#=f.DisplayName#>
		{
			get { return this.GetPropertyValue<<#=f.Type.CSharp#>>("<#=f.LogicalName#>"); }
<#if(!f.IsReadOnly){#>
			set { this.SetPropertyValue<<#=f.Type.CSharp#>>("<#=f.LogicalName#>", value, "<#=f.LogicalName#>"); }
<#}#>
		}
<#}#>
	}
	<# Manager.EndBlock(); #>
<#}#>
<# Manager.StartFooter();#>
}
<# Manager.EndBlock(); #>
<# Manager.Process(); #>